// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for Rust code
class LlmBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LlmBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LlmBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> load_model_ffi(
    ffi.Pointer<ffi.Char> model_name,
  ) {
    return _load_model_ffi(
      model_name,
    );
  }

  late final _load_model_ffiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('load_model_ffi');
  late final _load_model_ffi = _load_model_ffiPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> run_inference_c(
    ffi.Pointer<ffi.Char> input,
  ) {
    return _run_inference_c(
      input,
    );
  }

  late final _run_inference_cPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('run_inference_c');
  late final _run_inference_c = _run_inference_cPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> download_model_ffi(
    ffi.Pointer<ffi.Char> model_name,
  ) {
    return _download_model_ffi(
      model_name,
    );
  }

  late final _download_model_ffiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('download_model_ffi');
  late final _download_model_ffi = _download_model_ffiPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void free_string(
    ffi.Pointer<ffi.Char> ptr,
  ) {
    return _free_string(
      ptr,
    );
  }

  late final _free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'free_string');
  late final _free_string =
      _free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Uint32> tokenize_text_c(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _tokenize_text_c(
      text,
      length,
    );
  }

  late final _tokenize_text_cPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UintPtr>)>>('tokenize_text_c');
  late final _tokenize_text_c = _tokenize_text_cPtr.asFunction<
      ffi.Pointer<ffi.Uint32> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UintPtr>)>();

  void free_array(
    ffi.Pointer<ffi.Uint32> ptr,
    int length,
  ) {
    return _free_array(
      ptr,
      length,
    );
  }

  late final _free_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint32>, ffi.UintPtr)>>('free_array');
  late final _free_array =
      _free_arrayPtr.asFunction<void Function(ffi.Pointer<ffi.Uint32>, int)>();

  ffi.Pointer<ffi.Void> tokenize_text(
    ffi.Pointer<ffi.Char> _text,
  ) {
    return _tokenize_text(
      _text,
    );
  }

  late final _tokenize_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('tokenize_text');
  late final _tokenize_text = _tokenize_textPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> detokenize_ids(
    ffi.Pointer<ffi.Uint32> _tokens,
    int _length,
  ) {
    return _detokenize_ids(
      _tokens,
      _length,
    );
  }

  late final _detokenize_idsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Uint32>, ffi.UintPtr)>>('detokenize_ids');
  late final _detokenize_ids = _detokenize_idsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Uint32>, int)>();
}
